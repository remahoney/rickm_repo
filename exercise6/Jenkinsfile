pipeline {
    agent {
      label 'docker-agent'
    }
    stages {
      stage('Checkout code and prepare environment') {
        steps {
          git url: 'https://github.com/remahoney/Continuous-Delivery-with-Docker-and-Jenkins-Second-Edition.git', branch: 'master'
          sh """
          cd Chapter08/sample1
          chmod +x gradlew
          """
      }
      stage('Build Branches') {
            steps {
                script {
                    if (env.BRANCH_NAME == 'main') {
                        echo 'Running build on main branch'
                    } else if (env.BRANCH_NAME.contains('feature')) {
                        echo 'Running build on feature branch'
                    } else if (env.BRANCH_NAME.contains('test')) {
                        echo 'Running build on test branch'
                    }
                      else {
                        error('Branch not allowed to run this pipeline')
                    }
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    if (env.BRANCH_NAME == 'main' || env.BRANCH_NAME.contains('feature') || env.BRANCH_NAME.contains('test')) {
                        echo 'Running tests'
                        sh """
                          cd Chapter08/sample1
                          ./gradlew test
                          ./gradlew jacocoTestReport
                          ./gradlew jacocoTestCoverageVerification
                         """
                      }
                    } else {
                        error('Branch not allowed to run this pipeline')
                    }
                }
            }
        }
        stage('CodeCoverage') {
            steps {
                script {
                    if (env.BRANCH_NAME == 'main') {
                        echo 'Running code coverage on main branch'
                        sh """
                          cd Chapter08/sample1
                          ./gradlew checkstyleTest
//                        ./gradlew CodeCoverage
//                        ./gradlew checkstyle
                         """
                      }
                    } else {
                        echo 'Skipping code coverage'
                    }
                }
            }
        stage ('Print Reports') {    
          steps {
            publishHTML (
              target: [
                reportDir: 'Chapter08/sample1/build/reports/tests/test',
                reportFiles: 'index.html',
                reportName: "JaCoCo and JaCoCo checkstyle Report"
              ]
            )     
          }
        }
      }
    }
    post {
      success {
        echo 'pipeline ran perfectly'
        } 
      failure {
        echo 'pipeline failure'
        }
    }
}
